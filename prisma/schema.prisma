
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String?
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  phone         String?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Author {
  id                 String               @id
  name               String
  continent          String?
  field              String?
  pronouns           String?
  age                String?
  location           String?
  living             String?
  image              String?
  writingStyle1Id    String?
  writingStyle1      WritingStyle?        @relation("AuthorWritingStyle1", fields: [writingStyle1Id], references: [id], onDelete: SetNull)
  writingStyle2Id    String?
  writingStyle2      WritingStyle?        @relation("AuthorWritingStyle2", fields: [writingStyle2Id], references: [id], onDelete: SetNull)
  ai_persona         String?
  createdAt          DateTime             @default(now())
  writingGenres      AuthorWritingGenre[]
  personalities      AuthorPersonality[]

  @@map("authors")
}

model AuthorWritingGenre {
  id        String   @id @default(uuid())
  authorId  String
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  writes    String?  // Keep temporarily for migration
  genre1Id  String?
  genre1    Genre1?  @relation(fields: [genre1Id], references: [id], onDelete: SetNull)
  genre2Id  String?
  genre2    Genre2?  @relation(fields: [genre2Id], references: [id], onDelete: SetNull)
  genre_1   String?  // DEPRECATED - keep temporarily for migration
  genre_2   String?  // DEPRECATED - keep temporarily for migration
  genre_3   String?  // Free text - remains as is
  createdAt DateTime @default(now())

  @@map("author_writing_genres")
}

model Genre1 {
  id        String   @id @default(uuid())
  name      String
  writes    String   // "Fiction", "Non-fiction", or "Speculative"
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  genre2Options Genre2[]
  writingGenres AuthorWritingGenre[]

  @@unique([writes, name])
  @@map("genre_1")
  @@index([writes])
}

model Genre2 {
  id           String   @id @default(uuid())
  name         String
  genre1Id     String
  genre1       Genre1   @relation(fields: [genre1Id], references: [id], onDelete: Cascade)
  readingGrade String?
  chapterCount String?
  wordCount    String?
  price        String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  writingGenres AuthorWritingGenre[]

  @@unique([genre1Id, name])
  @@map("genre_2")
  @@index([genre1Id])
}

model Personality {
  id        String              @id @default(uuid())
  name      String              @unique
  order     Int                 @default(0)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  
  authors   AuthorPersonality[]

  @@map("personalities")
}

model AuthorPersonality {
  id            String      @id @default(uuid())
  authorId      String
  author        Author      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  personalityId String
  personality   Personality @relation(fields: [personalityId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())

  @@unique([authorId, personalityId])
  @@map("author_personalities")
  @@index([authorId])
  @@index([personalityId])
}

model WritingStyle {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  group       String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorsAsStyle1 Author[] @relation("AuthorWritingStyle1")
  authorsAsStyle2 Author[] @relation("AuthorWritingStyle2")

  @@map("writing_styles")
}
